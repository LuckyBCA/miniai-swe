generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String           @id
  email                     String           @unique
  name                      String?
  encryptedOpenRouterApiKey String?
  encryptedTogetherAiApiKey String?
  // Credit system fields
  credits                   Int              @default(50) // Daily free credits
  creditsResetAt            DateTime?        // When credits were last reset
  isPremuim                 Boolean          @default(false) // Premium subscription status
  stripeCustomerId          String?          // Stripe customer ID for premium users
  stripeSubscriptionId      String?          // Stripe subscription ID
  // Relations
  vibes                     Vibe[]
  sandboxPreviews           SandboxPreview[]
  creditUsage               CreditUsage[]
}

model Vibe {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  prompt    String
  code      String?
  status    GenerationStatus @default(PENDING)
  provider  String?
  model     String?
  userId    String
  error     String?
  metadata  Json?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SandboxPreview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  appName   String
  projectId String?
  status    String // PENDING, RUNNING, COMPLETED, FAILED
  url       String?
  sandboxId String?
  error     String?
  
  metadata  Json?
}

model CreditUsage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  action    String   // 'app_generation', 'sandbox_preview', 'code_execution'
  cost      Int      @default(1) // Credits consumed
  success   Boolean  @default(true) // Whether the action was successful
  metadata  Json?    // Additional metadata about the usage
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}

enum GenerationStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
